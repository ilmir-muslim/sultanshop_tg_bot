import logging
from aiogram.types import InlineKeyboardButton, InputMediaPhoto
from aiogram import F, Router
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import (
    orm_add_to_cart,
    orm_delete_from_cart,
    orm_get_banner,
    orm_get_categories,
    orm_get_products,
    orm_get_quantity_in_cart,
    orm_get_user_carts,
    orm_reduce_product_in_cart,
    orm_update_orders_banner_description,
)
from kbds.inline import (
    # create_order_menu_btns,
    get_products_btns,
    get_user_cart,
    get_user_catalog_btns,
    get_user_main_btns,
)

from utils.paginator import Paginator


menu_progressing_router = Router()


async def main_menu(session, level, menu_name, user_id=None):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    quantity = await orm_get_quantity_in_cart(session, user_id=user_id)
    kbds = get_user_main_btns(level=level, quantity=quantity)

    return image, kbds


async def catalog(session, level, menu_name, user_id=None):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)

    categories = await orm_get_categories(session)
    quantity = await orm_get_quantity_in_cart(session, user_id=user_id)
    kbds = get_user_catalog_btns(level=level, categories=categories, quantity=quantity)

    return image, kbds


def pages(paginator: Paginator):
    btns = dict()
    if paginator.has_previous():
        btns["‚óÄ –ü—Ä–µ–¥."] = "previous"

    if paginator.has_next():
        btns["–°–ª–µ–¥. ‚ñ∂"] = "next"

    return btns


async def products(session, level, category, page, user_id=None):
    products = await orm_get_products(session, category_id=category)

    paginator = Paginator(products, page=page)
    product = paginator.get_page()[0]
    is_available = product.is_available

    image = InputMediaPhoto(
        media=product.image,
        caption=f"<strong>{product.name}</strong>\n"
        f"{product.description}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)}\n"
        f"<strong>–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages}</strong>\n"
        f"<strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name}</strong>\n"
        f"<strong>–ü—Ä–æ–¥–∞–≤–µ—Ü: {product.seller.name}</strong>\n"
        f"<strong>{"–µ—Å—Ç—å " if is_available else "–Ω–µ—Ç "}–≤ –Ω–∞–ª–∏—á–∏–∏</strong>\n",
        parse_mode="HTML",
    )

    pagination_btns = pages(paginator)

    quantity = await orm_get_quantity_in_cart(session, user_id=user_id)
    kbds = get_products_btns(
        level=level,
        category=category,
        page=page,
        pagination_btns=pagination_btns,
        product_id=product.id,
        quantity=quantity,
        is_available=is_available,
    )

    kbds.inline_keyboard.append(
        [
            InlineKeyboardButton(
                text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
                callback_data=f"show_all_in_category_{category}",  # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            )
        ]
    )
    return image, kbds


@menu_progressing_router.callback_query(F.data.startswith("show_all_in_category_"))
async def show_all_products(callback: CallbackQuery, session: AsyncSession):
    category_id = int(callback.data.split("_")[-1])
    products = await orm_get_products(session, category_id=category_id)
    user_id = callback.from_user.id
    quantity = await orm_get_quantity_in_cart(session, user_id=user_id)
    for product in products:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_products_btns –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = get_products_btns(
            level=2,
            category=category_id,
            page=1,
            pagination_btns={},
            product_id=product.id,
            sizes=(2, 1),
            quantity=quantity,
            is_available=product.is_available,
        )

        await callback.message.answer_photo(
            product.image,
            caption=f"<strong>{product.name}</strong>\n"
            f"{product.description}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)}\n"
            f"<strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name}</strong>\n"
            f"<strong>–ü—Ä–æ–¥–∞–≤–µ—Ü: {product.seller.name}</strong>\n",
            parse_mode="HTML",
            reply_markup=reply_markup,
        )

    await callback.answer("–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


async def carts(session, level, menu_name, page, user_id, product_id):
    if menu_name == "delete":
        await orm_delete_from_cart(session, user_id, product_id)
        if page > 1:
            page -= 1
    elif menu_name == "decrement":
        is_cart = await orm_reduce_product_in_cart(session, user_id, product_id)
        if page > 1 and not is_cart:
            page-= 1
    elif menu_name == "increment":
        await orm_add_to_cart(session, user_id, product_id)

    carts = await orm_get_user_carts(session, user_id)


    if not carts:
        banner = await orm_get_banner(session, "cart")
        image = InputMediaPhoto(
            media=banner.image, caption=f"<strong>{banner.description}</strong>"
        )

        kbds = get_user_cart(
            level=level,
            page=None,
            pagination_btns=None,
            product_id=None,
        )

    else:
        paginator = Paginator(carts, page=page)

        cart = paginator.get_page()[0]

        cart_price = round(cart.quantity * cart.product.price, 2)
        total_price = round(sum(cart.quantity * cart.product.price for cart in carts), 2)
        print(f"DEBUG: –û–±—â–∞—è —Å—É–º–º–∞: {total_price}")
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—á–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã
        cart_summary_lines = [
            "–¢–æ–≤–∞—Ä      | –ö–æ–ª | –¶–µ–Ω–∞   | –°—É–º–º–∞",
            "----------------------------------",
        ]

    for c in carts:
        name = c.product.name[:10].ljust(10)       # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        qty = str(c.quantity).rjust(3)              # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price_per_unit = f"{c.product.price:.2f}".rjust(6)  # –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É
        total = f"{c.quantity * c.product.price:.2f}".rjust(5)  # –°—É–º–º–∞
        cart_summary_lines.append(f"{name} | {qty} | {price_per_unit} | {total}")


        cart_summary_text = "\n".join(cart_summary_lines)

        # –°–æ–±–∏—Ä–∞–µ–º caption
        caption = (
            f"<strong>{cart.product.name}</strong>\n"
            f"{cart.product.price}¬£ x {cart.quantity} = {cart_price}¬£\n"
            f"–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages} –≤ –∫–æ—Ä–∑–∏–Ω–µ.\n\n"
            f"üì¶ <u>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:</u>\n"
            f"<pre>{cart_summary_text}</pre>\n"
            f"üí∞ <strong>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {total_price}¬£"
        )

        # –ï—Å–ª–∏ caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî —É—Ä–µ–∑–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if len(caption) > 1024:
            cart_summary_text = "\n".join(cart_summary_lines[:5] + ["...–∏ –¥—Ä."])
            caption = (
                f"<strong>{cart.product.name}</strong>\n"
                f"{cart.product.price}¬£ x {cart.quantity} = {cart_price}¬£\n"
                f"–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages} –≤ –∫–æ—Ä–∑–∏–Ω–µ.\n\n"
                f"üì¶ <u>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:</u>\n"
                f"<pre>{cart_summary_text}</pre>\n"
                f"üí∞ <strong>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {total_price}¬£"
            )

        # –°–æ–∑–¥–∞—ë–º image
        image = InputMediaPhoto(
            media=cart.product.image, caption=caption, parse_mode="HTML"
        )

        pagination_btns = pages(paginator)

        kbds = get_user_cart(
            level=level,
            page=page,
            pagination_btns=pagination_btns,
            product_id=cart.product.id,
        )

    return image, kbds

async def orders(session: AsyncSession, level: int, menu_name: str, user_id: int):
    # –°–æ–∑–¥–∞—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ Banner
    await orm_update_orders_banner_description(session, user_id)
    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤
    banner = await orm_get_banner(session, menu_name)


    caption = banner.description

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(caption) > 1024:
        caption = caption[:1020] + "...\n(–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    image = InputMediaPhoto(media=banner.image, caption=caption, parse_mode="HTML")
    quantity = await orm_get_quantity_in_cart(session, user_id=user_id)
    kbds = get_user_main_btns(level=level, quantity=quantity)

    return image, kbds

async def get_menu_content(
    session: AsyncSession,
    level: int,
    menu_name: str,
    category: int | None = None,
    page: int | None = None,
    product_id: int | None = None,
    user_id: int | None = None,
):
    if level == 0:
        return await main_menu(session, level, menu_name, user_id)
    elif level == 1:
        return await catalog(session, level, menu_name, user_id)
    elif level == 2:
        return await products(session, level, category, page, user_id)
    elif level == 3:
        return await carts(session, level, menu_name, page, user_id, product_id)
    elif level == 4:
        return await orders(session, level, menu_name, user_id)

 