from aiogram import F, Bot, Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from database.orm_query import (
    orm_add_deliverer,
    orm_add_review,
    orm_get_deliverer_reviews_and_update_summary,
    orm_get_deliverers,
    orm_get_orders,
    orm_update_deliverer,
    orm_update_order,
    orm_update_review,
)
from filters.chat_types import ChatTypeFilter
from kbds.inline import inline_buttons_kb
from kbds.reply import get_keyboard


deliverer_private_router = Router()
deliverer_private_router.message.filter(ChatTypeFilter(["private"]))


class DelivererRatingState(StatesGroup):
    waiting_for_phone = State()


class SharedContextDeliverer:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_is_active(self, user_id: int) -> bool:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ is_active –∏–∑ –ë–î."""
        deliverer = await orm_get_deliverers(self.session, telegram_id=user_id)
        if not deliverer:
            raise ValueError("–î–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        return deliverer.is_active

    async def get_deliverer_kb(self, user_id: int) -> types.ReplyKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ get_keyboard, —É—á–∏—Ç—ã–≤–∞—è is_active."""
        is_active = await self.get_is_active(user_id)
        return get_keyboard(
            "—Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
            "–ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã" if not is_active else "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã",
        )

    async def send_active_orders(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫—É.
        """
        orders = await orm_get_orders(self.session, status="–û—Ñ–æ—Ä–º–ª–µ–Ω")
        if not orders:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        for order in orders:
            if not order.delivery_address.lower() == "—Å–∞–º–æ–≤—ã–≤–æ–∑":
                await message.answer(
                    f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.id}\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.user.first_name} {order.user.last_name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
                    f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} ¬£.\n"
                    f"üìã –°—Ç–∞—Ç—É—Å: {order.status}\n"
                    f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created.strftime('%d.%m.%Y %H:%M')}\n",
                    reply_markup=inline_buttons_kb(
                        {"–ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑": {"callback_data": f"accept_order_{order.id}"}}
                    ),
                )


@deliverer_private_router.message(Command("deliverer"))
async def delivery_command(
    message: types.Message, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deliverer
    """
    user_id = message.from_user.id
    deliverer = await orm_get_deliverers(session, telegram_id=user_id)

    if not deliverer:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(DelivererRatingState.waiting_for_phone)
    else:
        shared_context = SharedContextDeliverer(session)
        deliverer_kb = await shared_context.get_deliverer_kb(user_id)
        await message.answer(
            "–í—ã –≤ –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=deliverer_kb
        )


@deliverer_private_router.message(DelivererRatingState.waiting_for_phone)
async def handle_phone_number(
    message: types.Message, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    phone_number = message.text  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await orm_add_deliverer(
        session,
        telegram_id=user_id,
        telegram_name=user_name,
        first_name=user_first_name,
        last_name=user_last_name,
        phone=phone_number,
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    shared_context = SharedContextDeliverer(session)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    deliverer_kb = await shared_context.get_deliverer_kb(user_id)
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –¥–æ—Å—Ç–∞–≤—â–∏–∫", reply_markup=deliverer_kb
    )


@deliverer_private_router.message(F.text == "—Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
async def active_orders(message: types.Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "—Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    """
    context = SharedContextDeliverer(session)
    await context.send_active_orders(message)


@deliverer_private_router.message(F.text.in_(["–ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã", "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã"]))
async def deliverer_status(message: types.Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã" –∏–ª–∏ "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã"
    """
    user_id = message.from_user.id
    if message.text == "–ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã":
        data = {"is_active": True}
        await orm_update_deliverer(session, telegram_id=user_id, data=data)
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        shared_context = SharedContextDeliverer(session)
        deliverer_kb = await shared_context.get_deliverer_kb(user_id)
        await message.answer(
            "–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∑–∞–∫–∞–∑—ã, –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç",
            reply_markup=deliverer_kb,
        )
    elif message.text == "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã":
        data = {"is_active": False}
        await orm_update_deliverer(session, telegram_id=user_id, data=data)
        shared_context = SharedContextDeliverer(session)
        deliverer_kb = await shared_context.get_deliverer_kb(user_id)
        await message.answer(
            "–í—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∑–∞–∫–∞–∑—ã, –∑–∞–∫–∞–∑—ã –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å",
            reply_markup=deliverer_kb,
        )


@deliverer_private_router.callback_query(F.data.startswith("accept_order_"))
async def accept_order(callback: types.CallbackQuery, session: AsyncSession, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑"
    """
    deliverer = await orm_get_deliverers(session, telegram_id=callback.from_user.id)
    order_id = int(callback.data.split("_")[-1])
    order = await orm_get_orders(session, order_id=order_id)
    data_for_update = {
        "deliverer_id": deliverer.id,
        "status": "–í —Ä–∞–±–æ—Ç–µ",
    }
    await bot.send_message(
        order.user_id,
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º {deliverer.first_name}\n"
        f"–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {deliverer.phone}\n"
        f"–Ω–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä—å–µ—Ä—É: @{deliverer.telegram_name}\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.",
    )
    await orm_update_order(session, order_id, data_for_update)
    await callback.message.answer(
        f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{order_id}, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "—è –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑", –∫–æ–≥–¥–∞ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É',
        reply_markup=inline_buttons_kb(
            {
                "—è –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑": {
                    "callback_data": f"complete_order_{order_id}",
                }
            }
        ),
    )


@deliverer_private_router.callback_query(F.data.startswith("complete_order_"))
async def complete_order(
    callback: types.CallbackQuery, session: AsyncSession, bot: Bot
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "—è –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑"
    """
    order_id = int(callback.data.split("_")[-1])
    order = await orm_get_orders(session, order_id=order_id)

    data_for_update = {
        "status": "–í—ã–ø–æ–ª–Ω–µ–Ω",
    }
    # await bot.send_message(
    #     order.user_id,
    #     f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω! \n"
    #     f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤—â–∏–∫—É –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤",
    #     reply_markup=get_raiting_keyboard(
    #         target_type="deliverer",
    #         target_id=order.deliverer,  # ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
    #         order_id=order_id,  # ID –∑–∞–∫–∞–∑–∞
    #     ),
    # )
    await orm_update_order(session, order_id, data_for_update)
    await callback.answer(f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{order_id}")
    context = SharedContextDeliverer(session)
    await context.send_active_orders(callback.message)


@deliverer_private_router.callback_query(F.data.startswith("deliverer_"))
async def deliverer_rating(
    callback: types.CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚≠êÔ∏è"
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = callback.data.split("_")
    deliverer_id = int(data[1])  # ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
    order_id = int(data[2])  # ID –∑–∞–∫–∞–∑–∞
    rating = int(data[3])  # –û—Ü–µ–Ω–∫–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await orm_add_review(
        session,
        user_id=callback.from_user.id,
        deliverer_id=deliverer_id,
        order_id=order_id,
        rating=rating,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(deliverer_id=deliverer_id, order_id=order_id)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
    await state.set_state(DelivererRatingState.waiting_for_phone)
    await callback.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤—ë–∑–¥.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–µ."
    )


@deliverer_private_router.message(DelivererRatingState.waiting_for_phone)
async def handle_review_text(
    message: types.Message, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    deliverer_id = data["deliverer_id"]
    order_id = data["order_id"]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    review_text = message.text
    await state.update_data(review_text=review_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await orm_update_review(
        session,
        data={
            "user_id": message.from_user.id,
            "deliverer_id": deliverer_id,
            "order_id": order_id,
            "text": review_text,
        },
    )
    orm_get_deliverer_reviews_and_update_summary(
        session,
        deliverer_id=deliverer_id,
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
