from aiogram import F, Bot, types, Router
from aiogram.filters import CommandStart

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import (
    orm_add_to_cart,
    orm_add_user,
    orm_create_order,
    orm_get_user,
    orm_update_user,
)

from filters.chat_types import ChatTypeFilter
from handlers.menu_processing import get_menu_content
from kbds.inline import MenuCallBack, phone_confirm_kb, address_confirm_kb, status_in_progress_kb
from kbds.reply import location_keyboard


class OrderState(StatesGroup):
    waiting_for_address = State()
    waiting_for_phone_number = State()


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")

    await message.answer_photo(
        media.media, caption=media.caption, reply_markup=reply_markup
    )



async def add_to_cart(
    callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession
):
    user = callback.from_user
    await orm_add_user(
        session,
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        phone=None,
    )
    await orm_add_to_cart(session, user_id=user.id, product_id=callback_data.product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")


# TODO –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–ø—Ä–æ–¥—É–º–∞—Ç—å –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É –∏—Ö –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å)


@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(
    callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession
):

    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        return

    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page=callback_data.page,
        product_id=callback_data.product_id,
        user_id=callback.from_user.id,
    )

    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()


# 1. –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@user_private_router.callback_query(F.data == "make_order")
async def make_order(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession
):
    user_id = callback.from_user.id
    user = await orm_get_user(
        session, user_id
    )  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ

    if user and user.phone:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä
        
        await callback.message.answer(
            f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}\n–í—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
            reply_markup=phone_confirm_kb,
        )
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +201234567890):"
        )

    await state.set_state(OrderState.waiting_for_phone_number)


# 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ
@user_private_router.callback_query(F.data == "confirm_phone")
async def confirm_phone(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession
):
    user = await orm_get_user(session, callback.from_user.id)
    await state.update_data(phone_number=user.phone)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç–µ–π—Ç

    if user.address:
        await callback.message.answer(
            f"–í–∞—à –∞–¥—Ä–µ—Å: {user.address}\n–í—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
            reply_markup=address_confirm_kb,
        )
        await state.set_state(OrderState.waiting_for_address)
    else:
        await callback.message.answer(
            '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å–∞–º–æ–≤—ã–≤–æ–∑":'
        )
        await state.set_state(OrderState.waiting_for_address)



@user_private_router.callback_query(F.data == "change_phone")
async def change_phone(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@user_private_router.message(OrderState.waiting_for_phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    if not phone_number.startswith("+") or not phone_number[1:].isdigit():
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +201234567890")
        return

    await state.update_data(phone_number=phone_number)

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å–∞–º–æ–≤—ã–≤–æ–∑":'
    )
    await state.set_state(OrderState.waiting_for_address)


# 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ
@user_private_router.callback_query(F.data == "confirm_address")
async def confirm_address(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot
):
    data = await state.get_data()
    phone_number = data.get("phone_number")

    user = await orm_get_user(session, callback.from_user.id)
    delivery_address = user.address

    # –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ state
    await state.update_data(delivery_address=delivery_address)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    new_order = await orm_create_order(
        session, callback.from_user.id, delivery_address, phone_number
    )


    order_details = (
    f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{new_order.id}\n"
    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {callback.from_user.first_name} {callback.from_user.last_name}\n"
    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
    f"üìç –ê–¥—Ä–µ—Å: {delivery_address}\n"
    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {new_order.total_price} —Ä—É–±."
    )

    for admin_id in bot.my_admins_list:
        try:
            await bot.send_message(admin_id, order_details)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


    
    await callback.message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{new_order.id} —Å–æ–∑–¥–∞–Ω!\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\nüìç –ê–¥—Ä–µ—Å: {delivery_address}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {new_order.total_price} —Ä—É–±."
    )
    await state.clear()


@user_private_router.callback_query(F.data == "change_address")
async def change_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å–∞–º–æ–≤—ã–≤–æ–∑"):',
        reply_markup=location_keyboard,
    )


@user_private_router.message(OrderState.waiting_for_address)
async def process_address(
    message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot
):
    user = message.from_user
    data = await state.get_data()
    phone_number = data.get("phone_number")
    user_id = message.from_user.id

    if message.location:
        delivery_address = f"{message.location.latitude}, {message.location.longitude}"
    else:
        delivery_address = message.text.strip()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ state —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤–≤–æ–¥–∞
    await state.update_data(delivery_address=delivery_address)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await orm_update_user(
        session,
        user_id=user_id,
        data={  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
            "first_name": user.first_name,
            "last_name": user.last_name,
            "phone": phone_number,
            "address": delivery_address,
        }
    )


    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    new_order = await orm_create_order(session, user_id, delivery_address, phone_number)

    order_details = (
    f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{new_order.id}\n"
    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {message.from_user.first_name} {message.from_user.last_name}\n"
    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
    f"üìç –ê–¥—Ä–µ—Å: {delivery_address}\n"
    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {new_order.total_price} EGP"
    )

    for admin_id in bot.my_admins_list:
        try:
            await bot.send_message(admin_id, order_details, reply_markup=status_in_progress_kb)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{new_order.id} —Å–æ–∑–¥–∞–Ω!\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\nüìç –ê–¥—Ä–µ—Å: {delivery_address}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {new_order.total_price} —Ä—É–±."
    )
    await state.clear()

