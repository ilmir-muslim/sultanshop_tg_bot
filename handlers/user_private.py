import logging
from venv import logger
from aiogram import F, Bot, types, Router
from aiogram.filters import CommandObject, CommandStart


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import (
    orm_add_to_cart,
    orm_add_to_wait_list,
    orm_add_user,
    orm_create_order,
    orm_get_deliverers,
    orm_get_user,
    orm_get_user_carts,
    orm_update_user,
)

from filters.chat_types import ChatTypeFilter
from handlers.menu_processing import get_menu_content, main_menu, shipping
from kbds.inline import (
    MenuCallBack,
    one_button_kb,
    phone_confirm_kb,
    address_confirm_kb,
)
from utils.json_operations import delete_sharing_data, load_sharing_data


class OrderState(StatesGroup):
    waiting_for_address = State()
    waiting_for_phone_number = State()


class SharedContextUser:
    def __init__(self, session, bot):
        self.session = session
        self.bot = bot 

    async def order_details_text(self, order) -> dict:
        """—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞."""

        order_details = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.id}\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.user.first_name} {order.user.last_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} ¬£.\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {order.status}\n"
            f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created.strftime('%d.%m.%Y %H:%M')}\n"
        )
        if order.items:
            order_details += "\nüõí –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
            for idx, item in enumerate(order.items, start=1):
                order_details += f"{idx}. {item.product.name} - {item.quantity} —à—Ç. x {item.product.price} ¬£ = {item.quantity * item.product.price} ¬£\n"

        order_details_for_buyer = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.id}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} ¬£.\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {order.status}\n"
            f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created.strftime('%d.%m.%Y %H:%M')}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
        if order.items:
            order_details_for_buyer += "\nüõí –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
            for idx, item in enumerate(order.items, start=1):
                order_details_for_buyer += f"{idx}. {item.product.name} - {item.quantity} —à—Ç. x {item.product.price} ¬£ = {item.quantity * item.product.price} ¬£\n"
        return {
            "order_details": order_details,
            "order_details_for_buyer": order_details_for_buyer,
        }

    async def send_message_to_deliverers(self, order) -> types.Message:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É."""
        deliverers = await orm_get_deliverers(session=self.session)

        logger.debug(f"deliverers raw: {deliverers}")

        my_deliverer_list = [
            deliverer.telegram_id for deliverer in deliverers if deliverer.is_active
        ]
        logger.debug(f"my_deliverer_list {my_deliverer_list}")

        order_details_dict = await self.order_details_text(order=order)
        order_text = order_details_dict["order_details"]

        for deliverer in my_deliverer_list:
            try:
                await self.bot.send_message(
                    deliverer,
                    order_text,
                    reply_markup=one_button_kb(
                        text="–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                        callback_data=f"accept_order_{order.id}",
                    ),
                )
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {deliverer}")

    async def send_message_to_admins(self, order) -> types.Message:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""

        admin_list = self.bot.my_admins_list
        logger.debug(f"admin_list raw: {admin_list}")

        order_details_dict = await self.order_details_text(order=order)
        order_text = order_details_dict["order_details"]

        for admin in admin_list:
            try:
                await self.bot.send_message(
                    admin,
                    order_text,
                    reply_markup=one_button_kb(
                        text="–í —Ä–∞–±–æ—Ç–µ",
                        callback_data=f"accept_order_{order.id}",
                    ),
                )
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}")

    async def finish_order(self, user, state, delivery_address: str):
        data = await state.get_data()
        phone_number = data.get("phone_number")
        user_id = user.id

        await state.update_data(delivery_address=delivery_address)

        await orm_update_user(
            self.session,
            user_id=user_id,
            data={
                "first_name": user.first_name,
                "last_name": user.last_name,
                "phone": phone_number,
                "address": delivery_address,
            },
        )

        new_order = await orm_create_order(
            self.session, user_id, delivery_address, phone_number
        )
        logger.debug(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {new_order}")
        order_details_dict = await self.order_details_text(order=new_order)
        order_details_for_buyer = order_details_dict["order_details_for_buyer"]

        await self.send_message_to_deliverers(new_order)
        await self.send_message_to_admins(new_order)
        await self.bot.send_message(user_id, order_details_for_buyer)
        await self.bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!")
        media, reply_markup = await main_menu(
            self.session, level=0, menu_name="main", user_id=user_id
        )
        await self.bot.send_photo(
            user_id, photo=media.media, caption=media.caption, reply_markup=reply_markup
        )
        await state.clear()
    


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(
    message: types.Message, session: AsyncSession, command: CommandObject
):
    try:
        logging.info(f"Start command message: {message.text}")
        logging.info(f"Start command args: {command.args}")

        args = command.args  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        if args and args.startswith("add_to_cart_"):
            try:
                product_id = int(args.split("_")[-1])
            except (IndexError, ValueError):
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–≤–∞—Ä–∞.")
                return

            user = message.from_user

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            await orm_add_user(
                session,
                user_id=user.id,
                first_name=user.first_name,
                last_name=user.last_name,
                phone=None,
            )

            await orm_add_to_cart(session, user_id=user.id, product_id=product_id)
            await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

            user_id = message.from_user.id
            media, reply_markup = await get_menu_content(
                session, level=0, menu_name="main", user_id=user_id
            )
            await message.answer_photo(
                media.media, caption=media.caption, reply_markup=reply_markup
            )
        else:
            user_id = message.from_user.id
            media, reply_markup = await get_menu_content(
                session, level=0, menu_name="main", user_id=user_id
            )
            await message.answer_photo(
                media.media, caption=media.caption, reply_markup=reply_markup
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_cmd: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def add_to_cart(
    callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession
):
    user = callback.from_user
    await orm_add_user(
        session,
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        phone=None,
    )
    await orm_add_to_cart(session, user_id=user.id, product_id=callback_data.product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")


async def add_to_waitlist(
    callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession
):
    user = callback.from_user
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
    success_added = await orm_add_to_wait_list(
        session, user_id=user.id, product_id=callback_data.product_id
    )
    if success_added:
        await callback.answer("–í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏.")
    else:
        await callback.answer("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä")


@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(
    callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession
):
    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        
        return

    if callback_data.menu_name == "add_to_waitlist":
        await add_to_waitlist(callback, callback_data, session)
        return

    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page=callback_data.page,
        product_id=callback_data.product_id,
        user_id=callback.from_user.id,
    )

    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()


# 1. –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@user_private_router.callback_query(F.data == "make_order")
async def make_order(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot
):
    user_id = callback.from_user.id
    cart = await orm_get_user_carts(session, user_id=user_id)
    has_delivery_zone = any(
        item.product.name.startswith("–ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏") for item in cart
    )
    try:
        has_delivery_address = load_sharing_data(user_id).get("delivery_address")
    except FileNotFoundError:
        has_delivery_address = False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        has_delivery_address = False

    if not has_delivery_zone and not has_delivery_address:
        media, reply_markup = await shipping(
            session=session, level=5, menu_name="shipping", user_id=user_id
        )
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        await bot.send_photo(
            user_id,
            photo=media.media,
            caption=media.caption,
            reply_markup=reply_markup,
        )
        return

    user = await orm_get_user(
        session, user_id
    )  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ

    if user and user.phone:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä

        await callback.message.answer(
            f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}\n–í—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
            reply_markup=phone_confirm_kb,
        )
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +201234567890):"
        )

    await state.set_state(OrderState.waiting_for_phone_number)


@user_private_router.callback_query(F.data == "orders")
async def user_orders(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é orders –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    media, reply_markup = await get_menu_content(
        session=session,
        level=4,  # –£—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        menu_name="orders",
        user_id=user_id,
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()


# 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ
@user_private_router.callback_query(F.data == "confirm_phone")
async def confirm_phone(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot
):
    user = await orm_get_user(session, callback.from_user.id)
    await state.update_data(phone_number=user.phone)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç–µ–π—Ç
    try:
        self_pickup = load_sharing_data(callback.from_user.id)
    except FileNotFoundError:
        self_pickup = False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        self_pickup = False
    if self_pickup:
        context = SharedContextUser(session, bot)
        await context.finish_order(
            user=callback.from_user,
            state=state,
            delivery_address=self_pickup.get("delivery_address"),
        )
        delete_sharing_data(callback.from_user.id)
    else:
        if user.address:

            await callback.message.answer(
                f"–í–∞—à –∞–¥—Ä–µ—Å: {user.address}\n–í—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
                reply_markup=address_confirm_kb,
            )
            await state.set_state(OrderState.waiting_for_address)
        else:
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

            await state.set_state(OrderState.waiting_for_address)


@user_private_router.callback_query(F.data == "change_phone")
async def change_phone(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@user_private_router.message(OrderState.waiting_for_phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    if not phone_number.startswith("+") or not phone_number[1:].isdigit():
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +201234567890")
        return

    await state.update_data(phone_number=phone_number)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)


# 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ
@user_private_router.callback_query(F.data == "confirm_address")
async def confirm_address(
    callback: types.CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    bot: Bot,
):
    user = await orm_get_user(session, callback.from_user.id)
    delivery_address = user.address
    context = SharedContextUser(session, bot)
    await context.finish_order(
        user=callback.from_user,
        state=state,
        delivery_address=delivery_address,
    )


@user_private_router.callback_query(F.data == "change_address")
async def change_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å"):')


@user_private_router.message(OrderState.waiting_for_address)
async def process_address(
    message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot
):
    context = SharedContextUser(session, bot)
    await context.finish_order(
        user=message.from_user,
        state=state,
        delivery_address=message.text.strip(),
    )
