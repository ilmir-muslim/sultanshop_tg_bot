from venv import logger
from sqlalchemy import func, select, update, delete
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm.exc import NoResultFound
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import joinedload, selectinload

from database.models import (
    Banner,
    Cart,
    Category,
    Deliverer,
    DelivererReview,
    Orders,
    OrderItem,
    Product,
    Seller,
    Users,
    WaitList,
)


############### –†–∞–±–æ—Ç–∞ —Å –±–∞–Ω–Ω–µ—Ä–∞–º–∏ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏) ###############


async def orm_add_banner_description(session: AsyncSession, data: dict):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ –∏–º–µ–Ω–∞–º
    # –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é: main, about, cart, shipping, payment, catalog
    query = select(Banner)
    result = await session.execute(query)
    if result.first():
        return
    session.add_all(
        [
            Banner(name=name, description=description)
            for name, description in data.items()
        ]
    )
    await session.commit()


async def orm_change_banner_image(session: AsyncSession, name: str, image: str):
    query = update(Banner).where(Banner.name == name).values(image=image)
    await session.execute(query)
    await session.commit()


async def orm_get_banner(session: AsyncSession, page: str):
    query = select(Banner).where(Banner.name == page)
    result = await session.execute(query)
    return result.scalar()


async def orm_get_info_pages(session: AsyncSession):
    query = select(Banner)
    result = await session.execute(query)
    return result.scalars().all()


async def orm_update_orders_banner_description(session: AsyncSession, user_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–æ—Ñ–æ—Ä–º–ª–µ–Ω" –∏ "–≤ —Ä–∞–±–æ—Ç–µ"
    –≤ –ø–æ–ª–µ description –∑–∞–ø–∏—Å–∏ —Å –∏–º–µ–Ω–µ–º 'orders' –≤ —Ç–∞–±–ª–∏—Ü–µ Banner.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    query = (
        select(
            Orders.id,
            Orders.delivery_address,
            Orders.status,
            Orders.total_price,
            OrderItem.quantity,
            Product.name,
            Product.price,
            Deliverer.first_name,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Deliverer
            Deliverer.phone,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Deliverer
        )
        .join(Orders.items)  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π OrderItem
        .join(OrderItem.product)  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π Product
        .outerjoin(
            Orders.deliverer
        )  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π Deliverer (outerjoin –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏)
        .where(Orders.user_id == user_id, Orders.status.in_(["–û—Ñ–æ—Ä–º–ª–µ–Ω", "–í —Ä–∞–±–æ—Ç–µ"]))
    )
    result = await session.execute(query)
    user_orders = result.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–æ–ª–µ description
    if not user_orders:
        description = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
    else:
        orders_text = ["<strong>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</strong>"]
        current_order_id = None
        for row in user_orders:
            if row.id != current_order_id:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
                if current_order_id is not None:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
                    orders_text.append("üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏\n")

                current_order_id = row.id
                deliverer_info = (
                    f"üõµ –ö—É—Ä—å–µ—Ä : {row.first_name}\n"
                    f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫—É—Ä—å–µ—Ä–∞ : {row.phone}\n"
                    if row.first_name and row.phone
                    else "–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.\n"
                )
                orders_text.append(
                    f"üÜî –ó–∞–∫–∞–∑ #{row.id}\n"
                    f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {row.delivery_address}\n"
                    f"üì¶ –°—Ç–∞—Ç—É—Å: {row.status}\n"
                    f"üí∞ –°—É–º–º–∞: {row.total_price}¬£\n"
                    f"{deliverer_info}"
                    f"-----------------------------------\n"
                    "–¢–æ–≤–∞—Ä—ã:"
                )
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ –∑–∞–∫–∞–∑–µ
            orders_text.append(f"- {row.name} x {row.quantity} ({row.price}¬£ –∑–∞ —à—Ç.)")
        orders_text.append("-----------------------------------")
        description = "\n".join(orders_text)
        logger.debug(f"DEBUG: {description}")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    
    if len(description) > 1024:
        description = description[:1020] + "...\n(–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ description –≤ –∑–∞–ø–∏—Å–∏ —Å –∏–º–µ–Ω–µ–º 'orders' –≤ —Ç–∞–±–ª–∏—Ü–µ Banner
    update_query = (
        update(Banner).where(Banner.name == "orders").values(description=description)
    )
    await session.execute(update_query)
    await session.commit()

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"DEBUG: –ü–æ–ª–µ description –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ 'orders': {description}")


############################ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ######################################


async def orm_get_categories(session: AsyncSession):
    query = select(Category)
    result = await session.execute(query)
    return result.scalars().all()


async def orm_create_categories(session: AsyncSession, categories: list):
    query = select(Category)
    result = await session.execute(query)
    if result.first():
        return
    session.add_all([Category(name=name) for name in categories])
    await session.commit()


async def orm_add_category(session: AsyncSession, category_name: str):
    query = select(Category).where(Category.name == category_name)
    result = await session.execute(query)
    if result.first():
        return False

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    session.add(Category(name=category_name))
    await session.commit()
    return True


############ –ê–¥–º–∏–Ω–∫–∞: –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ########################


async def orm_add_product(session: AsyncSession, data: dict):
    new_product = Product(
        name=data["name"],
        description=data["description"],
        category_id=int(data["category"]),
        seller_id=int(data["seller"]),
        purchase_price=float(data["purchase_price"]),
        price=float(data["price"]),
        image=data["image"],
    )
    session.add(new_product)
    await session.commit()


async def orm_get_product(session: AsyncSession, product_id: int):
    query = (
        select(Product)
        .where(Product.id == product_id)
        .options(
            selectinload(Product.category),
            selectinload(Product.seller),
        )
    )
    result = await session.execute(query)
    return result.scalar()


async def orm_get_product_by_name(session: AsyncSession, product_name: str):
    result = await session.execute(
        select(Product.id).where(Product.name == product_name)
    )
    product_id = result.scalar()
    return product_id


async def orm_get_products(session: AsyncSession, category_id: int = None):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω category_id, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    query = select(Product).options(
        selectinload(Product.category),  # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        selectinload(Product.seller),  # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–∞
    )
    if category_id is not None:
        query = query.where(Product.category_id == category_id)

    result = await session.execute(query)
    return result.scalars().all()


async def orm_update_product(session: AsyncSession, product_id: int, data: dict):
    query = (
        update(Product)
        .where(Product.id == product_id)
        .values(
            name=data["name"],
            description=data["description"],
            category_id=int(data["category"]),
            seller_id=int(data["seller"]),
            purchase_price=float(data["purchase_price"]),
            price=float(data["price"]),
            image=data["image"],
        )
    )
    await session.execute(query)
    await session.commit()


async def orm_update_product_availability(
    session: AsyncSession, product_id: int, is_available: bool
):
    query = (
        update(Product)
        .where(Product.id == product_id)
        .values(is_available=is_available)
    )
    await session.execute(query)
    await session.commit()


async def orm_check_product_available(session: AsyncSession, product_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç (is_available = True).

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞.
    :return: True, –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    query = select(Product.is_available).where(Product.id == product_id)
    result = await session.execute(query)
    is_available = result.scalar()
    return bool(is_available)


async def orm_delete_product(session: AsyncSession, product_id: int):
    query = delete(Product).where(Product.id == product_id)
    await session.execute(query)
    await session.commit()


##################### —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ #####################################


async def orm_add_user(
    session: AsyncSession,
    user_id: int,
    first_name: str | None = None,
    last_name: str | None = None,
    phone: str | None = None,
):
    query = select(Users).where(Users.user_id == user_id)
    result = await session.execute(query)
    if result.first() is None:
        session.add(
            Users(
                user_id=user_id, first_name=first_name, last_name=last_name, phone=phone
            )
        )
        await session.commit()


async def orm_get_user(session: AsyncSession, user_id: int):
    query = select(Users).where(Users.user_id == user_id)
    result = await session.execute(query)
    return result.scalar()


async def orm_update_user(session: AsyncSession, user_id: int, data: dict):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(select(Users).where(Users.user_id == user_id))
    user = result.scalar_one_or_none()

    if not user:
        raise NoResultFound(f"User with id {user_id} not found")

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏
    update_data = {
        key: value
        for key, value in data.items()
        if hasattr(Users, key) and value is not None
    }

    if update_data:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        query = update(Users).where(Users.user_id == user_id).values(**update_data)
        await session.execute(query)
        await session.commit()


##################### —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ #####################################


async def orm_get_sellers(session: AsyncSession):
    query = select(Seller).where()
    result = await session.execute(query)
    return result.scalars().all()


async def orm_add_seller(
    session: AsyncSession,
    name: str,
    description: str = None,
    phone: str = None,
    address: str = None,
):
    existing_seller = await session.execute(select(Seller).where(Seller.name == name))
    if existing_seller.scalar():
        return False

    new_seller = Seller(
        name=name,
        description=description,
        phone=phone,
        address=address,
    )
    session.add(new_seller)
    await session.commit()
    return True


######################## –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–∞–º–∏ #######################################


async def orm_add_to_cart(session: AsyncSession, user_id: int, product_id: int):
    query = select(Cart).where(Cart.user_id == user_id, Cart.product_id == product_id)
    cart = await session.execute(query)
    cart = cart.scalar()
    if cart:
        cart.quantity += 1
        await session.commit()
        return cart
    else:
        session.add(Cart(user_id=user_id, product_id=product_id, quantity=1))
        await session.commit()


async def orm_get_user_carts(session: AsyncSession, user_id):
    query = (
        select(Cart).filter(Cart.user_id == user_id).options(joinedload(Cart.product))
    )
    result = await session.execute(query)
    return result.scalars().all()


async def orm_delete_from_cart(session: AsyncSession, user_id: int, product_id: int):
    query = delete(Cart).where(Cart.user_id == user_id, Cart.product_id == product_id)
    await session.execute(query)
    await session.commit()


async def orm_reduce_product_in_cart(
    session: AsyncSession, user_id: int, product_id: int
):
    query = select(Cart).where(Cart.user_id == user_id, Cart.product_id == product_id)
    cart = await session.execute(query)
    cart = cart.scalar()

    if not cart:
        return
    if cart.quantity > 1:
        cart.quantity -= 1
        await session.commit()
        return True
    else:
        await orm_delete_from_cart(session, user_id, product_id)
        await session.commit()
        return False


async def orm_get_quantity_in_cart(session: AsyncSession, user_id: int):
    query = select(func.sum(Cart.quantity)).where(Cart.user_id == user_id)
    result = await session.execute(query)
    total_quantity = result.scalar()
    return total_quantity or 0


######################## –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ #######################################


async def orm_create_order(
    session: AsyncSession, 
    user_id: int, 
    delivery_address: str, 
    phone_number: str
) -> Orders:
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    query = (
        select(Cart)
        .where(Cart.user_id == user_id)
        .options(joinedload(Cart.product))
    )
    result = await session.execute(query)
    cart_items = result.scalars().all()

    if not cart_items:
        return None

    # 2. –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_price = sum(item.product.price * item.quantity for item in cart_items)

    # 3. –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ 
    new_order = Orders(
        user_id=user_id,
        delivery_address=delivery_address,
        total_price=total_price,
        status="–û—Ñ–æ—Ä–º–ª–µ–Ω",
    )
    session.add(new_order)
    await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞

    # 4. –°–æ–∑–¥–∞—ë–º OrderItem 
    order_item = [
        OrderItem(
            order_id=new_order.id, 
            product_id=item.product_id, 
            quantity=item.quantity
        )
        for item in cart_items
    ]
    session.add_all(order_item)

    # 5. –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É 
    delete_query = delete(Cart).where(Cart.user_id == user_id)
    await session.execute(delete_query)

    # 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    full_order = await session.execute(
        select(Orders)
        .where(Orders.id == new_order.id)
        .options(
            selectinload(Orders.user),
            selectinload(Orders.items).joinedload(OrderItem.product)
        )
    )
    full_order = full_order.scalar_one()

    await session.commit()
    return full_order



async def orm_get_orders(session: AsyncSession, status: str = None, order_id: int = None):
    query = select(Orders).options(
        selectinload(Orders.user),
        selectinload(Orders.items).selectinload(OrderItem.product),
        selectinload(Orders.deliverer),
    )
    if order_id is not None:
        query = query.where(Orders.id == order_id)
    elif status is not None:
        query = query.where(Orders.status == status)

    result = await session.execute(query)
    if order_id is not None:
        return result.scalar_one_or_none()
    return result.scalars().all()


async def orm_get_user_orders(session: AsyncSession, user_id: int):
    query = (
        select(Orders)
        .where(Orders.user_id == user_id, Orders.status.in_(["–û—Ñ–æ—Ä–º–ª–µ–Ω", "–í —Ä–∞–±–æ—Ç–µ"]))
        .options(joinedload(Orders.items).joinedload(OrderItem.product))
    )
    result = await session.execute(query)
    return result.scalars().all()


async def orm_update_order(session: AsyncSession, order_id: int, data: dict):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Order.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param order_id: ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
                 –ö–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—è–º –º–æ–¥–µ–ª–∏ Order.
    :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Order.
    """
    query = (
        update(Orders)
        .where(Orders.id == order_id)
        .values(**data)
        .execution_options(synchronize_session="fetch")
    )
    await session.execute(query)
    await session.commit()


################# —Ä–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫ ################################


async def orm_add_to_wait_list(session: AsyncSession, user_id: int, product_id: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É WaitList.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞.
    :return: True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ False (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ WaitList
    query = select(WaitList).where(
        WaitList.user_id == user_id, WaitList.product_id == product_id
    )
    result = await session.execute(query)
    existing_entry = result.scalar()

    if existing_entry:
        return False  # –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    new_wait_list_entry = WaitList(user_id=user_id, product_id=product_id)
    session.add(new_wait_list_entry)
    await session.commit()
    return True


################# —Ä–∞–±–æ—Ç–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏################################


async def orm_get_delivery_zones(session: AsyncSession):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Product —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–î–æ—Å—Ç–∞–≤–∫–∞/–ö—É—Ä—å–µ—Ä"
    –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å–æ —Å–ª–æ–≤ "–ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ".
    """
    query = (
        select(Product)
        .join(Product.category)  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π Category
        .where(
            Category.name == "–î–æ—Å—Ç–∞–≤–∫–∞/–ö—É—Ä—å–µ—Ä",  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            Product.name.like(
                "–ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ %"
            ),  # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ "
        )
    )
    result = await session.execute(query)
    return result.scalars().all()


async def orm_add_deliverer(
    session: AsyncSession,
    telegram_id: int,
    telegram_name: str = None,
    first_name: str = None,
    last_name: str = None,
    phone: str = None,
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É Deliverer.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param telegram_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :param telegram_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
    :param first_name: –ò–º—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :param last_name: –§–∞–º–∏–ª–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :param phone: –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    """
    new_deliverer = Deliverer(
        telegram_id=telegram_id,
        telegram_name=telegram_name,
        first_name=first_name,
        last_name=last_name,
        phone=phone,
    )
    session.add(new_deliverer)
    try:
        await session.commit()
    except IntegrityError as e:
        await session.rollback()
        raise ValueError(
            f"–î–æ—Å—Ç–∞–≤—â–∏–∫ —Å telegram_id={telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        ) from e


async def orm_get_deliverers(session: AsyncSession, telegram_id: int = None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–ª–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ telegram_id.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param telegram_id: Telegram ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    :return: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –æ–¥–∏–Ω –¥–æ—Å—Ç–∞–≤—â–∏–∫ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω telegram_id) –∏–ª–∏ False, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    query = select(Deliverer)
    if telegram_id is not None:
        query = query.where(Deliverer.telegram_id == telegram_id)

    result = await session.execute(query)
    if telegram_id is not None:
        deliverer = result.scalar_one_or_none()
        if deliverer is None:
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return deliverer
    return result.scalars().all()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤


async def orm_update_deliverer(session: AsyncSession, telegram_id: int, data: dict):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ Deliverer.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param telegram_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :param telegram_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
    :param first_name: –ò–º—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :param last_name: –§–∞–º–∏–ª–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :param phone: –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    """
    query = update(Deliverer).where(Deliverer.telegram_id == telegram_id).values(**data)
    await session.execute(query)
    await session.commit()


############ —Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ #######################################


async def orm_add_review(
    session: AsyncSession,
    user_id: int,
    deliverer_id: int,
    order_id: int,
    rating: int,
    text: str = None,
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    new_review = DelivererReview(
        user_id=user_id,
        deliverer_id=deliverer_id,
        order_id=order_id,
        rating=rating,
        text=text,
    )
    session.add(new_review)
    await session.commit()


async def orm_update_review(session: AsyncSession, data: dict):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
                 –ö–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—è–º –º–æ–¥–µ–ª–∏ Reviews.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤
    query = select(DelivererReview).where(
        DelivererReview.user_id == data["user_id"],
        DelivererReview.deliverer_id == data["deliverer_id"],  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        DelivererReview.order_id == data["order_id"],
    )
    result = await session.execute(query)
    review = result.scalar_one_or_none()

    if not review:
        raise NoResultFound("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    update_query = (
        update(DelivererReview)
        .where(
            DelivererReview.user_id == data["user_id"],
            DelivererReview.deliverer_id == data["deliverer_id"],
            DelivererReview.order_id == data["order_id"],
        )
        .values(**data)
        .execution_options(synchronize_session="fetch")
    )
    await session.execute(update_query)
    await session.commit()


async def orm_get_deliverer_reviews_and_update_summary(
    session: AsyncSession, deliverer_id: int
) -> float:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞, –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç rating_summary.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param deliverer_id: ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :return: –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
    query = select(DelivererReview.rating).where(
        DelivererReview.deliverer_id == deliverer_id
    )
    result = await session.execute(query)
    ratings = result.scalars().all()

    if not ratings:
        raise ValueError(f"–î–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å ID {deliverer_id} –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
    average_rating = sum(ratings) / len(ratings)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ rating_summary –≤ —Ç–∞–±–ª–∏—Ü–µ Deliverer
    update_query = (
        update(Deliverer)
        .where(Deliverer.id == deliverer_id)
        .values(rating_summary=average_rating)
        .execution_options(synchronize_session="fetch")
    )
    await session.execute(update_query)
    await session.commit()

    return average_rating
